.TH LIBVFTRACE "1" "MONTH YEAR" "Vftrace VERSION" "VFTRACE"
.SH NAME
libvftrace \- Profiling library
.SH SYNOPSIS
.IP "\fBcompile with vftrace:\fR"
.IX Item "compile with vftrace:"
<compiler> <options> -finstrument-functions -I${VFTRACE_ROOT}/include/ -c <sourcefile> 
.IP "\fBlink with vftrace:\fR"
.IX Item "link with vftrace:"
<linker> <options> -o <executable> <objects> -L${VFTRACE_ROOT}/lib -lvftrace -lm

.SH DESCRIPTION
.\" Add any additional description here
.PP
Vftrace is a profiling library for C, C++, and Fortran programs. 
Utilizing function hooks, vftrace collects information about the callstack
timeline as well as timings and performance informations of all called functions.
It supports logging of MPI-communication via special wrapping routines.
The MPI-3.1 Standard is fully supported.
The profiling behaviour can be controlled by a config file, which is
passed to vftrace via an environment varialbe.
Vftrace provides a set of functions that can be incorporated
into the profiled programs source code in order to identify bottlenecks
more easily.
.PP
.SH "PROFILING CONTROL"
.IX Header "PROFILING CONTROL"
.SS ENVIRONMENT VARIABLES:
.IX Subsection "ENVIRONMENT VARIABLES"
.IP "\fBVFTR_OFF\fR"
.IX Item "VFTR_OFF"
\fBDisable\fR(1,"YES","Yes","yes","true")
.br
\fBEnable\fR(0,"NO","No","no","false")
.br
Switches off Vftrace profiling. The program execution is as without Vftrace, although
it might have been linked against libvftrace. This environment variable takes precedence over the config file.
.br
\fBDefault: "no"\fR
.\"
.IP "\fBVFTR_CONFIG\fR"
.IX Item "VFTR_CONFIG"
Path to the config file to fine tune vftrace profiling.
If no configuration file is given vftrace works on default settings.
The selected configuraion will be present at the end of the log-file.
.\"
.SS CONFIG FILE
.IX Subsection "CONFIG FILE"
Profiling with vftrace can be controlled and tuned using a config file.
The config file is passed to vftrace via the environment variable \fBVFTR_CONFIG\fR.
The config file is in the JSON file format.
The selected configuraion will be present at the end of the log-file.
A default config can also be generated with the \fBvftrace_generate_default_config\fR
program.
To check the validity of your config the program \fBvftrace_check_config\fR is provided.
Here is a complete config file with the default values:
   {
      "off": false,
      "output_directory": ".",
      "outfile_basename": null,
      "logfile_for_ranks": "none",
      "print_config": true,
      "strip_module_names": false,
      "demangle_cxx": false,
      "include_cxx_prelude": false,
      "profile_table": {
         "show_table": true,
         "show_calltime_imbalances": false,
         "show_callpath": false,
         "show_overhead": false,
         "sort_table": {
            "column": "time_excl",
            "ascending": false
         }
      },
      "name_grouped_profile_table": {
         "show_table": false,
         "max_stack_ids": 8,
         "sort_table": {
            "column": "time_excl",
            "ascending": false
         }
      },
      "sampling": {
         "active": false,
         "sample_interval": 0.005000,
         "outbuffer_size": 8,
         "precise_functions": null
      },
      "mpi": {
         "show_table": true,
         "log_messages": true,
         "only_for_ranks": "all",
         "show_sync_time": false,
         "show_callpath": false,
         "sort_table": {
            "column": "none",
            "ascending": false
         }
      },
      "cuda": {
         "show_table": true,
         "sort_table": {
            "column": "time",
            "ascending": false
         }
      },
      "veda": {
         "show_table": true,
         "sort_table": {
            "column": "time",
            "ascending": false
         }
      },
      "hardware_scenarios": {
         "active": false
      }
   }
.IP "\fBoff\fR"
.IX Item "off"
.br
Switches off Vftrace profiling.
The program execution is as without Vftrace, although
it might have been linked against libvftrace.
The environment variable \fBVFTR_OFF\fR takes precedence over this option.
.br
\fBDefault: false\fR

.IP "\fBoutput_directory\fR"
.IX Item "output_directory"
.br
Sets the output directory for the profiling data files (.vfd) and logfiles (.log).
.br
\fBDefault: "."\fR

.IP "\fBoutfile_basename\fR"
.IX Item "outfile_basename"
.br
The Basename of the ASCII log files (.log) and profiling data files (.vfd).
The full name of a profiling data file is <basename>_<mpirank>.vfd
and for a logfile <basename>_<mpirank>.log, or <basename>_all.log.
.br
\fBDefault: null\fR (the executable name)

.IP "\fBlogfile_for_ranks\fR"
.IX Item "logfile_for_ranks"
.br
Specifies the ranks for which a local logfile is created.
Vftrace always produces a summary logfile of the form
<basename>_all.log (see \fBoutfile_basename\fR").
It takes a string value as argument, so the content needs to be put in quotes ("").
Possible values are:
"\fBnone\fR" (no logfile for individual ranks),
"\fBall\fR" (logfiles for all ranks),
"\fBX-Y\fR" (logfiles for all ranks between X and Y),
and "\fBX,Y,Z\fR" (logfile only for ranks X, Y, and Z),
or a mixture of the latter two e.g. "\fB1,4,6,15-23,25,28-29,31\fR". 
.br
\fBDefault: "none"\fR

.IP "\fBprint_config\fR"
.IX Item "print_config"
.br
Append the used vftrace settings in a ready to use json format
to the end of the logfile.
.br
\fBDefault: true\fR

.IP "\fBstrip_module_names\fR"
.IX Item "strip_module_names"
.br
Removes the module name of the subroutine/function symbol.
The delimiter separating the module and function symbol name
is implementation dependent, thus depending on the used
compiler/linker.
.br
\fBDefault: false\fR
.IP "\fBdemangle_cxx\fR"
.IX Item "demangle_cxx"
.br
Demangle c++ symbol names to make them more human readable.
This requires libiberty to be installed and linked.
.br
\fBDefault: false\fR
.IP "\fBinclude_cxx_prelude\fR"
.IX Item "include_cxx_prelude"
.br
Include instrumented functions in the profiling process that were called before "main"
was called. This can lead to problems with the stacktree.
.br
\fBDefault: false\fR

.IP "\fBprofile_table\fR"
.IX Item "profile_table"
.br
This section controls writing of the profile table in the logfiles.

.IP "\fBprofile_table.show_table\fR"
.IX Item "profile_table.show_table"
.br
Show the runtime profile table in the logfiles.
.br
\fBDefault: true\fR

.IP "\fBprofile_table.show_calltime_imbalances\fR"
.IX Item "profile_table.show_calltime_imbalances"
.br
Display discrepancies in the time spend in functions
across ranks to locate compute load imbalances.
.br
\fBDefault: false\fR

.IP "\fBprofile_table.show_callpath\fR"
.IX Item "profile_table.show_callpath"
.br
Include the callpath of the function in the profile table,
instead of just the stacks id.
.br
\fBDefault: false\fR

.IP "\fBprofile_table.show_overhead\fR"
.IX Item "profile_table.show_overhead"
.br
Include a column with the calloverhead introduced
by vftrace profiling hooks in the profile table.
.br
\fBDefault: false\fR

.IP "\fBprofile_table.sort_table\fR"
.IX Item "profile_table.sort_table"
.br
This section controls how the profile table is sorted.

.IP "\fBprofile_table.sort_table.column\fR"
.IX Item "profile_table.sort_table.column"
.br
Specifies which column of the profile table should be used to sort the table.
Possible values are:
"\fBtime_exlc\fR" (exclusive time),
"\fBtime_incl\fR" (inclusive time),
"\fBcalls\fR" (number of calls),
"\fBstack_id\fR",
"\fBoverhead\fR",
and "\fBnone\fR".
.br
\fBDefault: "time_excl"\fR

.IP "\fBprofile_table.sort_table.ascending\fR"
.IX Item "profile_table.sort_table.ascending"
.br
Specifies whether the table will be sorted in ascending,
or descending order regarding the selected column.
.br
\fBDefault: false\fR

.IP "\fBname_grouped_profile_table\fR"
.IX Item "name_grouped_profile_table"
.br
This section controls writing of the name grouped profile table in the logfile.
In contrast to the runtime profile table where each entry is defined by the unique
callstack, the name grouped table groups entries together by the function name.

.IP "\fBname_grouped_profile_table.show_table\fR"
.IX Item "name_grouped_profile_table.show_table"
.br
Show the name grouped runtime profile table in the logfiles.
.br
\fBDefault: true\fR

.IP "\fBname_grouped_profile_table.max_stack_ids\fR"
.IX Item "name_grouped_profile_table.max_stack_ids"
.br
Controls how many stack ids (in ascending order) should be 
displayed in a column.
If a function name has more stack ids associated with it,
the list will be extended by three dots "...".
.br
\fBDefault: 8\fR

.IP "\fBname_grouped_profile_table.sort_table\fR"
.IX Item "name_grouped_profile_table.sort_table"
.br
This section controls how the profile table is sorted.

.IP "\fBname_grouped_profile_table.sort_table.column\fR"
.IX Item "name_grouped_profile_table.sort_table.column"
.br
Specifies which column of the name grouped profile table
should be used to sort the table.
Possible values are:
"\fBtime_exlc\fR" (exclusive time),
"\fBtime_incl\fR" (inclusive time),
"\fBcalls\fR" (number of calls),
and "\fBnone\fR".
.br
\fBDefault: "time_excl"\fR

.IP "\fBname_grouped_profile_table.sort_table.ascending\fR"
.IX Item "name_grouped_profile_table.sort_table.ascending"
.br
Specifies whether the table will be sorted in ascending,
or descending order regarding the selected column.
.br
\fBDefault: false\fR

.IP "\fBsampling\fR"
.IX Item "sampling"
This section controls the sampling of the profiled application in order to
create the application timeline in form of vfd files.
vfd files are of the form <basename>_<rank>.vfd
297 (see \fBoutfile_basename\fR).

.IP "\fBsampling.active\fR"
.IX Item "sampling.active"
Controls whether vftrace should sample the running application
and output a vfd file.
.br
\fBDefault: false\fR

.IP "\fBsampling.sample_interval\fR"
.IX "sampling.sample_interval"
Defines the shortest duration between consecutive samples in seconds.
Note that samples are only ever taken on function entry/exit. Therefore,
the time between samples can vary depending on your application.
.br
\fBDefault: 0.005\fR

.IP "\fBsampling.outbuffer_size\fR"
.IX "sampling.outbuffer_size"
Defines the buffer size in MiB that is attached to the IO-handle of the vfd file.
Buffered output is easier on the filesystem and can greatly reduce
IO-bottlenecks during sampling.
.br
\fBDefault: 8\fR

.IP "\fBsampling.precise_functions\fR"
.IX "sampling.precise_functions"
Takes a regular expression specifying for which functions
the sample_interval option should be ignored.
Entry and exit of those functions will always be sampled,
and appear in the vfd file.
\fBvftrace_regions\fR and \fBMPI\fR-routines,
are always marked to be precise.
.br
\fBDefault: null\fR

.IP "\fBmpi\fR"
.IX Item "mpi"
.br
This section controls writing of the mpi profile table in the logfiles.

.IP "\fBmpi.show_table\fR"
.IX Item "mpi.show_table"
.br
Show the mpi profile table in the logfiles.
.br
\fBDefault: true\fR

.IP "\fBmpi.log_messages\fR"
.IX Item "mpi.show_calltime_imbalances"
.br
Whether messages (size, sender/receiver, bandwidth, ...) should be
included in the vfd file during sampling, and included in the profiling.
.br
\fBDefault: true\fR

.IP "\fBmpi.only_for_ranks\fR"
.IX Item "mpi.only_for_ranks"
.br
Specifies the ranks for which a messages should be included in the profile.
Only if both sender and receiver are in the list, the message is logged.
It takes a string value as argument,
so the content needs to be put in quotes ("").
Possible values are:
"\fBnone\fR" (no messages are logged),
"\fBall\fR" (messages between all ranks are logged),
"\fBX-Y\fR" (messages between ranks between X and Y are logged),
and "\fBX,Y,Z\fR" (messages between ranks for ranks X, Y, and Z are logged),
or a mixture of the latter two e.g. "\fB1,4,6,15-23,25,28-29,31\fR". 
.br
\fBDefault: "all"\fR

.IP "\fBmpi.show_sync_time\fR"
.IX "mpi.show_sync_time"
Switches on the estimation of synchronization times
for blocking collective MPI communication.
These are:
Allgather,
Allgatherv,
Allreduce,
Alltoall,
Alltoallv,
Alltoallw,
Bcast,
Exscan,
Gather,
Gatherv,
Neighbor_allgather,
Neighbor_allgatherv,
Neighbor_alltoall,
Neighbor_alltoallv,
Neighbor_alltoallw,
Reduce,
Reduce_scatter_block,
Reduce_scatter,
Scan,
Scatter,
Scatterv.
Every process measures the time it takes
until all other processes arrive at the call.
The synchronization time will be measured
as a seperate function call "MPI_<mpi-function-name>_sync"
(e.g. MPI_Allreduce_sync).
Note that this might prevent processes from starting
communication with already arrived processes.
Therefore, communication imbalances can be off.
.br
\fBDefault: false\fR

.IP "\fBmpi.show_callpath\fR"
.IX Item "mpi.show_callpath"
.br
Include the callpath of the function in the mpi profile table,
instead of just the stacks id.
.br
\fBDefault: false\fR

.IP "\fBmpi.sort_table\fR"
.IX Item "mpi.sort_table"
.br
This section controls how the mpi profile table is sorted.

.IP "\fBmpi.sort_table.column\fR"
.IX Item "mpi.sort_table.column"
.br
Specifies which column of the mpi profile table
should be used to sort the table.
Possible values are:
"\fBmessages\fR" (number of messages),
"\fBsend_size\fR" (average send message size),
"\fBrecv_size\fR" (average recv message size),
"\fBsend_bw\fR" (average send bandwidth),
"\fBrecv_bw\fR" (average recv bandwidth),
"\fBcalls\fR" (number of calls),
"\fBcomm_time\fR" (time spend in communication),
"\fBstack_id\fR",
and "\fBnone\fR".
.br
\fBDefault: "none"\fR

.IP "\fBmpi.sort_table.ascending\fR"
.IX Item "mpi.sort_table.ascending"
.br
Specifies whether the table will be sorted in ascending,
or descending order regarding the selected column.
.br
\fBDefault: false\fR

.IP "\fBcuda\fR"
.IX Item "cuda"
.br
This section controls writing of the cuda profile table in the logfiles.

.IP "\fBcuda.show_table\fR"
.IX Item "cuda.show_table"
.br
Show the cuda profile table in the logfiles.
.br
\fBDefault: true\fR

.IP "\fBveda\fR"
.IX Item "veda"
.br
This section controls writing of the veda profile table in the logfiles.

.IP "\fBveda.show_table\fR"
.IX Item "veda.show_table"
.br
Show the veda profile table in the logfiles.
.br
\fBDefault: true\fR

.IP "\fBmpi.sort_table\fR"
.IX Item "mpi.sort_table"
.br
This section controls how the mpi profile table is sorted.

.IP "\fBmpi.sort_table.column\fR"
.IX Item "mpi.sort_table.column"
.br
Specifies which column of the mpi profile table
should be used to sort the table.
Possible values are:
"\fBtime\fR",
"\fBmemcpy\fR",
"\fBcbid\fR",
"\fBcalls\fR",
and "\fBnone\fR".
.br
\fBDefault: "time"\fR

.IP "\fBmpi.sort_table.ascending\fR"
.IX Item "mpi.sort_table.ascending"
.br
Specifies whether the table will be sorted in ascending,
or descending order regarding the selected column.
.br
\fBDefault: false\fR

.SS LIBRARY FUNCTIONS
.IX Subsection "LIBRARY FUNCTIONS"
Vftrace provides library functions which can be included in a C or Fortran application
which allow for a more detailed profiling of it. This requires the inclusion of
\fbvftrace.h\fR (C) or the \fbvftrace\fR module (Fortran).
.br
\fBWarning:\fR If an MPI-parallel code is profiled with vftrace the
functions and routines must only be called after \fBMPI_Init\fR 
and before \fBMPI_Finalize\fR!
.\"
.IP "\fBMPI_Pcontrol(level)\fR"
.IX Item "MPI_Pcontrol"
Required by the MPI-Standard (Section 14.2.4).
Lets you control the level of the MPI-Profiling.
.br
level == 0 Profiling is disabled.
.br
level == 1 Profiling is enabled at a normal default level of detail.
.br
level == 2 Profile buffers are flushed, which may be a no-op.
.br
Changing the level between the start and the corresponding Wait/Test of a
non-blocking communication can lead to undefined behavior.
Users are encouraged to use the \fBvftr_pause\fR and \fBvftr_resume\fR routines instead.
.br
\fBDefault: "1"
.IP "\fBvftrace_region_begin, vftrace_region_end\fR"
.IX Item "vftrace_region_begin_end"
Define the start and end of a region in the code, which should be monitored
independently from from a function entry.
The functions take as an argument a unique string identifier.
The defined region appears in the logfile and vfd files under the this name.
.\"Working example codes can be found in the test suite.
.br
\fBExample in C:\fR
   void testfunction() {
      ...
      vftrace_region_begin("NameOfTheRegion");
      // code to be profiled independently
      ...
      // from the rest of the function
      vftrace_region_end("NameOfTheRegion");
      ...
   }
.br
\fBExample in Fortran:\fR
   SUBROUTINE testroutine()
      ...
      CALL vftrace_region_begin("NameOfTheRegion")
      ! code to be profiled independently
      ...
      ! from the rest of the routine
      CALL vftrace_region_end("NameOfTheRegion")
      ...
   END SUBROUTINE
.\"
.IP "\fBvftrace_get_stack\fR"
.IX "vftrace_get_stack"
Returns a (char*) in C and a (character(len=*), pointer) in Fortran that contains the 
current callstack.
.br
\fBExample in C:\fR
   printf("%s\\n", vftrace_get_stack());
.br
\fBExample in Fortran:\fR
   write(*,*) vftrace_get_stack()
.\"
.IP "\fBvftrace_pause, vftrace_resume\fR"
.IX Item "vftrace_pause_resume"
Pauses the monitoring and profiling until \fBvftrace_resume\fR is called.
It has no effect if the monitoring is already paused
by an earlier call to vftrace_pause.
Pausing enables to focus on specific parts of the code and to reduce the size of logfiles and vfd files,
as well as runtime.
Note that \fBvftrace_pause\fR and \fBvftrace_resume\fR do not need to appear in the same
function, routine, or even compile unit.
They take effect as soon as they are encountered during program execution.
.br
\fBExample in C:\fR
   int main() {
      // This code is profiled
      ...
      vftrace_pause();
      // This code is not profiled
      ...
      vftrace_resume();
      // This code is profiled again 
      ...
   }
.br
\fBExample in Fortran:\fR
   PROGRAM testprogram
      ! This code is profiled
      ...
      CALL vftrace_pause()
      ! This code is not profiled
      ...
      CALL vftrace_resume()
      ! This code is code profiled again
      ...
   END PROGRAM testprogram
.\"
